# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  role: UserRoleType
  password: PasswordState
  enrollments(
    where: EnrollmentWhereInput! = {}
    orderBy: [EnrollmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  teachingIn(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  teachingInCount(where: CourseWhereInput! = {}): Int
  createdAt: DateTime
}

enum UserRoleType {
  admin
  student
  teacher
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: UserRoleTypeNullableFilter
  enrollments: EnrollmentManyRelationFilter
  teachingIn: CourseManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input EnrollmentManyRelationFilter {
  every: EnrollmentWhereInput
  some: EnrollmentWhereInput
  none: EnrollmentWhereInput
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  role: UserRoleType
  password: String
  enrollments: EnrollmentRelateToManyForUpdateInput
  teachingIn: CourseRelateToManyForUpdateInput
  createdAt: DateTime
}

input EnrollmentRelateToManyForUpdateInput {
  disconnect: [EnrollmentWhereUniqueInput!]
  set: [EnrollmentWhereUniqueInput!]
  create: [EnrollmentCreateInput!]
  connect: [EnrollmentWhereUniqueInput!]
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  role: UserRoleType
  password: String
  enrollments: EnrollmentRelateToManyForCreateInput
  teachingIn: CourseRelateToManyForCreateInput
  createdAt: DateTime
}

input EnrollmentRelateToManyForCreateInput {
  create: [EnrollmentCreateInput!]
  connect: [EnrollmentWhereUniqueInput!]
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

type Course {
  id: ID!
  title: String
  description: String
  slug: String
  thumbnailUrl: String
  durationInMinutes: Int
  price: Float
  courseEvaluation: Int
  enrolledOn(
    where: EnrollmentWhereInput! = {}
    orderBy: [EnrollmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Enrollment!]
  enrolledOnCount(where: EnrollmentWhereInput! = {}): Int
  lessons(
    where: LessonWhereInput! = {}
    orderBy: [LessonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Lesson!]
  lessonsCount(where: LessonWhereInput! = {}): Int
  teacher: User
  createdAt: DateTime
  updatedAt: DateTime
}

input CourseWhereUniqueInput {
  id: ID
  slug: String
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  thumbnailUrl: StringFilter
  durationInMinutes: IntFilter
  price: FloatNullableFilter
  courseEvaluation: IntNullableFilter
  enrolledOn: EnrollmentManyRelationFilter
  lessons: LessonManyRelationFilter
  teacher: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input LessonManyRelationFilter {
  every: LessonWhereInput
  some: LessonWhereInput
  none: LessonWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  slug: OrderDirection
  thumbnailUrl: OrderDirection
  durationInMinutes: OrderDirection
  price: OrderDirection
  courseEvaluation: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CourseUpdateInput {
  title: String
  description: String
  slug: String
  thumbnailUrl: String
  durationInMinutes: Int
  price: Float
  courseEvaluation: Int
  enrolledOn: EnrollmentRelateToManyForUpdateInput
  lessons: LessonRelateToManyForUpdateInput
  teacher: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LessonRelateToManyForUpdateInput {
  disconnect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  title: String
  description: String
  slug: String
  thumbnailUrl: String
  durationInMinutes: Int
  price: Float
  courseEvaluation: Int
  enrolledOn: EnrollmentRelateToManyForCreateInput
  lessons: LessonRelateToManyForCreateInput
  teacher: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LessonRelateToManyForCreateInput {
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Enrollment {
  id: ID!
  student: User
  course: Course
  createdAt: DateTime
  updatedAt: DateTime
}

input EnrollmentWhereUniqueInput {
  id: ID
}

input EnrollmentWhereInput {
  AND: [EnrollmentWhereInput!]
  OR: [EnrollmentWhereInput!]
  NOT: [EnrollmentWhereInput!]
  id: IDFilter
  student: UserWhereInput
  course: CourseWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EnrollmentOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EnrollmentUpdateInput {
  student: UserRelateToOneForUpdateInput
  course: CourseRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input EnrollmentUpdateArgs {
  where: EnrollmentWhereUniqueInput!
  data: EnrollmentUpdateInput!
}

input EnrollmentCreateInput {
  student: UserRelateToOneForCreateInput
  course: CourseRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

type Lesson {
  id: ID!
  title: String
  description: String
  slug: String
  videoUrl: String
  course: Course
  createdAt: DateTime
  updatedAt: DateTime
}

input LessonWhereUniqueInput {
  id: ID
  slug: String
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  videoUrl: StringFilter
  course: CourseWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LessonOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  slug: OrderDirection
  videoUrl: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LessonUpdateInput {
  title: String
  description: String
  slug: String
  videoUrl: String
  course: CourseRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LessonUpdateArgs {
  where: LessonWhereUniqueInput!
  data: LessonUpdateInput!
}

input LessonCreateInput {
  title: String
  description: String
  slug: String
  videoUrl: String
  course: CourseRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createEnrollment(data: EnrollmentCreateInput!): Enrollment
  createEnrollments(data: [EnrollmentCreateInput!]!): [Enrollment]
  updateEnrollment(
    where: EnrollmentWhereUniqueInput!
    data: EnrollmentUpdateInput!
  ): Enrollment
  updateEnrollments(data: [EnrollmentUpdateArgs!]!): [Enrollment]
  deleteEnrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  deleteEnrollments(where: [EnrollmentWhereUniqueInput!]!): [Enrollment]
  createLesson(data: LessonCreateInput!): Lesson
  createLessons(data: [LessonCreateInput!]!): [Lesson]
  updateLesson(where: LessonWhereUniqueInput!, data: LessonUpdateInput!): Lesson
  updateLessons(data: [LessonUpdateArgs!]!): [Lesson]
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteLessons(where: [LessonWhereUniqueInput!]!): [Lesson]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  courses(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  course(where: CourseWhereUniqueInput!): Course
  coursesCount(where: CourseWhereInput! = {}): Int
  enrollments(
    where: EnrollmentWhereInput! = {}
    orderBy: [EnrollmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Enrollment!]
  enrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  lessons(
    where: LessonWhereInput! = {}
    orderBy: [LessonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Lesson!]
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessonsCount(where: LessonWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
